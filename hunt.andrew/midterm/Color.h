#pragma once
#include <Trackable.h>
#include <windows.h>

const int BLACK = 0;	//SHORT for the color black

//enum for background colors
enum class BackgroundColor : WORD
{
	BLUE			= BACKGROUND_BLUE,
	RED				= BACKGROUND_RED,
	GREEN			= BACKGROUND_GREEN,
	TURQOISE		= BACKGROUND_BLUE | BACKGROUND_GREEN,
	YELLOW			= BACKGROUND_RED | BACKGROUND_GREEN,
	PURPLE			= BACKGROUND_RED | BACKGROUND_BLUE,
	LIGHT_BLUE		= BACKGROUND_BLUE | BACKGROUND_INTENSITY,
	LIGHT_RED		= BACKGROUND_RED | BACKGROUND_INTENSITY,
	LIGHT_GREEN		= BACKGROUND_GREEN | BACKGROUND_INTENSITY,
	LIGHT_TURQOISE	= BACKGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_INTENSITY,
	LIGHT_YELLOW	= BACKGROUND_RED | BACKGROUND_GREEN | BACKGROUND_INTENSITY,
	LIGHT_PURPLE	= BACKGROUND_RED | BACKGROUND_BLUE | BACKGROUND_INTENSITY,
	WHITE			= BACKGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_INTENSITY,
	LIGHT_GREY		= BACKGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_RED,
	GREY			= BACKGROUND_INTENSITY,
	BLACK			= BLACK
};

//enum for foreground colors
enum class ForegroundColor: WORD
{
	BLUE			= FOREGROUND_BLUE,
	RED				= FOREGROUND_RED,
	GREEN			= FOREGROUND_GREEN,
	TURQOISE		= FOREGROUND_BLUE | FOREGROUND_GREEN,
	YELLOW			= FOREGROUND_RED | FOREGROUND_GREEN,
	PURPLE			= FOREGROUND_RED | FOREGROUND_BLUE,
	LIGHT_BLUE		= FOREGROUND_BLUE | FOREGROUND_INTENSITY,
	LIGHT_RED		= FOREGROUND_RED | FOREGROUND_INTENSITY,
	LIGHT_GREEN		= BACKGROUND_GREEN | FOREGROUND_INTENSITY,
	LIGHT_TURQOISE	= FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY,
	LIGHT_YELLOW	= FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY,
	LIGHT_PURPLE	= FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY,
	WHITE			= FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_INTENSITY,
	LIGHT_GREY		= FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED,
	GREY			= FOREGROUND_INTENSITY,
	BLACK			= BLACK
};

class Color : public Trackable
{
	//allow display to access private variable
	friend class Display;

	public:
		//constructors
		Color();
		Color(BackgroundColor color);
		Color(ForegroundColor color);

		//destructor
		~Color() {};

		//mutators
		void setColor(BackgroundColor color);
		void setColor(ForegroundColor color);

	private:
		WORD mColorValue;	//16 bit short of the color value
};